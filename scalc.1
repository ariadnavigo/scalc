.TH SCALC 1 scalc\-VERSION
.SH NAME
.PP
scalc \- Simple calculator
.SH SYNOPSIS
.PP
.B scalc
.RB [ \-v ]
.SH DESCRIPTION
.PP
.B scalc 
is a very simple stack-based calculator 
that aims to be small, flexible, and extensible.
.PP
.B scalc 
reads RPN expressions from standard input.
Results are provided in double-precision floats to stdout. 
.PP
Currently supported mathematical functions include 
basic arithmetic operations, square roots, and natural logarithms. 
All functions are defined in the
.I op.c
module in the source tree.
.SS Commands
.B scalc 
accepts some commands, 
listed here for convenience, 
which modify scalc's behavior during a session:
.TP
.B :d
Drops the last element in the stack.
.TP
.B :D
Drops all elements in the stack.
.TP
.B :dup
Duplicate last element in the stack.
.TP
.B :list
List all available mathematical operations.
.TP
.B :p
Shows the last element in the stack.
.TP
.B :q
Quits 
.B scalc.
.TP
.BI :sav " reg"
Saves the value on the top of the stack to register
.I reg
(see below for more information.)
.TP
.B :swp
Swaps the last two elements in the stack.
.SS Memory registers
.B scalc
offers memory registers, 
labeled A-J (uppercase),
where values can be stored to and retrieved from.
These registers can be used wherever a numerical value is allowed,
e.g. in operations, stack operations, etc.
To retrieve a value from a specific register, 
just type in the label of the desired register. 
To store values in them refer to the
.B :sav
command above.
.SS Extending scalc math functions
.PP
.B scalc 
can be easily extended with new mathematical functions by adding them to the 
.I op.c
source file. 
The source file itself includes detailed instructions on how to do so.
.SH OPTIONS
.TP
.B \-v
Show version information and exit.
.SH EXAMPLES
.PP
The following example showcases basic operation with 
.B scalc.
.PP
Default interactive mode:
.PP
.nf
.RS
.RB $ " scalc"
.br 
.RB > " 2 3 + 9 / 15 /"
.br
0.037037
.br
.RB > " 90 *"
.br
3.333334
.br
.RB > " ln"
.br
1.203973
.br
.RB > " 78 9 -2
.br
69.000000000
.RB > " :sav A"
.br
.RB > " A 2 *"
.br
138.000000000
.RB > " :q"
.RE
.fi
.PP
Reading from a pipeline:
.PP
.nf
.RS
.RB $ " echo '34 ln' | scalc"
.br
3.526361
.RE
.fi
.SH SEE ALSO
.BR bc (1), dc (1) 